name: 构建Android APK

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 使用Docker构建APK
      run: |
        # 创建一个简化的Dockerfile
        cat > Dockerfile << 'EOF'
        FROM kivy/buildozer:latest

        # 安装额外依赖
        RUN apt-get update && apt-get install -y \
            python3-pip \
            && rm -rf /var/lib/apt/lists/*

        WORKDIR /app
        COPY . /app/

        # 简化的buildozer.spec
        RUN cat > buildozer.spec << 'SPEC'
        [app]
        title = SystemInfo
        package.name = systeminfo
        package.domain = org.example
        source.dir = .
        source.include_exts = py
        version = 0.1
        requirements = python3,kivy,psutil
        orientation = portrait

        [buildozer]
        log_level = 2

        [android]
        android.api = 29
        android.minapi = 21
        android.sdk = 29
        android.ndk = 21b
        android.accept_sdk_license = True
        SPEC

        # 构建APK
        RUN buildozer android debug

        CMD ["cp", "bin/*.apk", "/output/"]
        EOF

        # 构建Docker镜像并运行
        docker build -t apk-builder .
        
        # 创建输出目录
        mkdir -p ./output
        
        # 运行容器并复制APK
        docker run --rm -v $(pwd)/output:/output apk-builder sh -c "
          if [ -d bin ]; then
            cp bin/*.apk /output/ 2>/dev/null || echo 'No APK found'
          fi
          ls -la bin/ || echo 'No bin directory'
        "

    - name: 上传APK
      uses: actions/upload-artifact@v4
      with:
        name: SystemInfo-APK
        path: output/*.apk
        if-no-files-found: warn

    - name: 显示结果
      run: |
        echo "构建完成！"
        ls -la output/ || echo "No output directory"
